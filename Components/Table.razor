@typeparam TEntity where TEntity:class




<MudTable Items="@Items" Hover="true" SortLabel="Sort By" Elevation="1" Class="rounded-lg" Virtualize="true"
    Height="350px" FixedHeader="true" ServerData="OnTableChange" @ref="table">
    <ColGroup>
        @if (@ColumnGroup is not null)
        {
            @ColumnGroup
        }
    </ColGroup>
    <ToolBarContent>

        <MudText Typo="Typo.h6">
            @if (@Title is null)
            {
                @("No Title")
            }

            @Title
        </MudText>

        <MudSpacer />

        <MudIconButton Icon="@Icons.Filled.Refresh" Color="Color.Primary" aria-label="refresh" OnClick="Refresh">
        </MudIconButton>



    </ToolBarContent>

    <HeaderContent>
        @if (@HeaderDefinition is not null)
        {
            @HeaderDefinition
        }
    </HeaderContent>
    <RowTemplate>
        @if (@RowTemplate is not null)
        {
            @RowTemplate(@context)
        }

    </RowTemplate>

    <PagerContent>
        @if (@AllowPaging)
        {
            <MudTablePager />
        }

    </PagerContent>
</MudTable>



@code {

    [Parameter]
    public RenderFragment? Title { get; set; }

    [Parameter]
    public RenderFragment? HeaderDefinition { get; set; }

    private MudTable<TEntity> table;

    [Parameter]
    public RenderFragment<TEntity>? RowTemplate { get; set; }

    public TEntity[] Items { get; set; } = { };

    [Parameter]
    public bool AllowPaging { get; set; } = true;

    [Parameter]
    public IPaginatedHttpClient<TEntity> HttpClient { get; set; }

    [Parameter]
    public RenderFragment ColumnGroup { get; set; }

    public async Task<TableData<TEntity>> LoadData(TableState state)
    {
        return await HttpClient.Paginate(state);
    }

    private Func<TableState, Task<TableData<TEntity>>> OnTableChange => new(LoadData);

    private void Refresh()
    {
        table.ReloadServerData();
    }

}
