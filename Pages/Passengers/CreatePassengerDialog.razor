@inject ILogger<CreatePassengerDialog> Logger
@inject PassengerHttpClient Http

<EditForm Model="@Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@Model.Name" Label="Name" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="@Model.Trips" Label="Trips" Variant="Variant.Outlined"></MudTextField>
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="@Model.Airline" Label="Airline Id" Variant="Variant.Outlined">
                    </MudTextField>
                </MudItem>
            </MudGrid>

        </DialogContent>

        <DialogActions>
            <div class="my-4 mr-4">
                <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@_isSending">
                    @if (_isSending)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving</MudText>
                    }
                    else
                    {
                        <MudText>Save</MudText>
                    }
                </MudButton>
                <MudButton OnClick="Cancel">
                    <MudText>Close</MudText>
                </MudButton>
            </div>
        </DialogActions>

    </MudDialog>
</EditForm>



@code {
    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; }

    private bool _isSending = false;

    private CreatePassengerRequest Model = new();

    void Cancel() => Dialog.Cancel();


    async Task<int> Submit()
    {
        _isSending = true;

        var result = await Http.Create(Model);

        _isSending = false;

        Dialog.Close(DialogResult.Ok<bool>(result));

        return 1;
    }
}